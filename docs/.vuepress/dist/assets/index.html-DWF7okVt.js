import{_ as i,c as s,b as a,o as e}from"./app-CYQbWjt5.js";const n="/tutorial/asserts/image/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/git1.png",l="/tutorial/asserts/image/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/git2.png",d="/tutorial/asserts/image/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/git3.png",r="/tutorial/asserts/image/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/git4.png",p="/tutorial/asserts/image/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/git5.png",h="/tutorial/asserts/image/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/git6.png",g={};function c(o,t){return e(),s("div",null,t[0]||(t[0]=[a(`<h1 id="git基础指南" tabindex="-1"><a class="header-anchor" href="#git基础指南"><span>git基础指南</span></a></h1><p>概念：一个免费开源，分布式的代码版本控制系统，帮助开发团队维护代码</p><p>作用：记录代码内容，切换代码版本，多人开发提高效率</p><h1 id="初始-git" tabindex="-1"><a class="header-anchor" href="#初始-git"><span>初始 git</span></a></h1><h2 id="_1-git-安装" tabindex="-1"><a class="header-anchor" href="#_1-git-安装"><span>1. git 安装</span></a></h2><p>网址：https://git-scm.com/</p><p>确认是否安装成功可以使用查看 git 版本命令 <code>git -v</code></p><h2 id="_2-git-配置用户信息" tabindex="-1"><a class="header-anchor" href="#_2-git-配置用户信息"><span>2. git 配置用户信息</span></a></h2><p>配置：用户名和邮箱，提交代码时表明身份</p><p><code>git config --global user.name &quot;用户名&quot;</code> --设置用户名</p><p><code>git config --global user.email &quot;邮箱&quot;</code> --设置邮箱</p><h2 id="_3-初始化仓库" tabindex="-1"><a class="header-anchor" href="#_3-初始化仓库"><span>3. 初始化仓库</span></a></h2><p>用 <code>git init</code> 命令初始化创建仓库，此时文件夹里会出现后缀为 <code>.git</code> 的文件</p><p><code>.git</code> 文件用来存储记录历史，需要勾选隐藏文件夹选项才能看见 <code>.git</code> 文件</p><h2 id="_4-git-的三个区域" tabindex="-1"><a class="header-anchor" href="#_4-git-的三个区域"><span>4. git 的三个区域</span></a></h2><p><strong>git的使用：</strong></p><ul><li>工作区：实际开发时操作的文件夹</li><li>暂存区：保存之前的准备区域（暂存改动过的文件）</li><li>版本库：提交并保存暂存区中的内容，产生一个版本快照</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>git add 文件名 // 暂存指定文件</span></span>
<span class="line"><span>git add . // 暂存所有文件</span></span>
<span class="line"><span>git commit -m &quot;&quot;说明注释 // 提交并保存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-git-文件状态" tabindex="-1"><a class="header-anchor" href="#_5-git-文件状态"><span>5. Git 文件状态</span></a></h2><table><thead><tr><th style="text-align:center;">文件状态</th><th style="text-align:center;">概念</th><th style="text-align:center;">场景</th></tr></thead><tbody><tr><td style="text-align:center;">未跟踪（U）</td><td style="text-align:center;">从未被 Git 管理过</td><td style="text-align:center;">新文件</td></tr><tr><td style="text-align:center;">新添加（A）</td><td style="text-align:center;">第一次被 Git 暂存</td><td style="text-align:center;">之前版本记录无此文件</td></tr><tr><td style="text-align:center;">未修改（&#39;&#39;）</td><td style="text-align:center;">三个区域统一</td><td style="text-align:center;">提交保存后</td></tr><tr><td style="text-align:center;">已修改（M）</td><td style="text-align:center;">工作区内容变化</td><td style="text-align:center;">修改了内容产生</td></tr></tbody></table><h1 id="常用-git-命令" tabindex="-1"><a class="header-anchor" href="#常用-git-命令"><span>常用 git 命令</span></a></h1><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">1.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git config --list					// 查看清单 </span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">2.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git status -s 						// 查看文件状态</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">3.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git remote -v 						// 本地仓库中有哪些远程仓库</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">4.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git remote remove					// 移除当前仓库的远程仓库地址</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">5.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git status               			// 查看哪些文件未跟踪或已修改</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">6.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git pull							  	// 从 github 上拉取文件</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">7.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git remote add origin &#39;路径&#39; 		   // 添加仓库地址</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">8.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git push --set-upstream origin &quot;master&quot; // 上传文件</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">9.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git push -u origin &quot;master&quot;			// 第八点简写</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">10.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> git push							// 第九点简写</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#D4976C;">11.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">12.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h1><p>下面我们来演示如何将本地文件上传到 github</p><h2 id="_1-创建仓库" tabindex="-1"><a class="header-anchor" href="#_1-创建仓库"><span>1. 创建仓库</span></a></h2><p><img src="`+n+'" alt="i"></p><p><img src="'+l+'" alt="i"></p><p><img src="'+d+'" alt="i"></p><h2 id="_2-上传仓库" tabindex="-1"><a class="header-anchor" href="#_2-上传仓库"><span>2.上传仓库</span></a></h2><p>找到自己要上传的项目文件夹，我这边创建了一个名为 <code>gitStudy</code> 的文件夹，</p><p>在终端中用 <code>git init</code> 命令初始化 <mark>git</mark> 管理的项目</p><p><img src="'+r+'" alt="i"></p><p>接着用 <code>git add .</code> 的命令提交全部代码到暂存区，文件图标会从 <mark>U</mark> 变成 <mark>A</mark> ，</p><p>然后用 <code>git commit -m &quot;说明注释&quot;</code> ，提交一次，</p><p>用 <code>git remote add origin + HTTPS地址</code> 建立连接通道，这个HTTPS地址就是上面特别让您记住的那个，</p><p>最后 <code>git push -u origin master</code> 命令提交就完成了。</p><p><img src="'+p+'" alt="i"></p><p><mark>需要注意的是</mark>，第一次提交因为从未连接过 github ，所以会要出入账号和密码。</p><p><code>F5</code>刷新 gitub 的界面。</p><p>最后，我们的项目就成功上传到 github 上面了。</p><p><img src="'+h+'" alt="i"></p><p>如果我们此时想添加一个 <code>README.md</code> 文件来描述我们的项目。</p><p><mark>切记：</mark> 千万不要 github 面板上直接添加 or 修改。</p><p>由于我们的 github 远程仓库中修改后，我们本地仓库并未同步，下一次的 <code>push</code> 提交就会报错。</p><p>如果你不小心在 github 的面板上新建了文件，我们可以用 <code>git pull</code> 的命令拉取远程仓库代码，</p><p>在重新 <code>push</code> 上交一次就可以了。</p><p>好了，今天的代码我们就讲到这里，赶紧打开你的编辑器实操起来吧。</p>',47)]))}const m=i(g,[["render",c]]),u=JSON.parse('{"path":"/article/wvr5h8j5/","title":"git版本管理","lang":"zh-CN","frontmatter":{"title":"git版本管理","tags":["git","开发工具"],"createTime":"2024/05/12 11:22:08","permalink":"/article/wvr5h8j5/"},"headers":[],"readingTime":{"minutes":3.17,"words":952},"git":{"updatedTime":1742618558000,"contributors":[{"name":"8848TI","username":"8848TI","email":"3022926092@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/8848TI?v=4","url":"https://github.com/8848TI"}]},"filePathRelative":"开发工具/git版本管理.md","categoryList":[{"id":"2c5095","sort":10007,"name":"开发工具"}]}');export{m as comp,u as data};
